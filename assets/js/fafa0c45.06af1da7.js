"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[465],{4648:e=>{e.exports=JSON.parse('{"functions":[{"name":"Magnitude","desc":"Returns the magnitude (distance) of the vector from (0, 0, 0)\\n\\n    ","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":242,"path":"src/Vec64.luau"}},{"name":"Unit","desc":"Returns the unit (direction) of the vector\\n\\n    ","params":[],"returns":[{"desc":"","lua_type":"Vec64"}],"function_type":"method","source":{"line":252,"path":"src/Vec64.luau"}},{"name":"Cross","desc":"Returns the cross product of the two vectors\\n\\n\\n    ","params":[{"name":"vector","desc":"","lua_type":"Vec64"}],"returns":[{"desc":"","lua_type":"Vec64"}],"function_type":"method","source":{"line":265,"path":"src/Vec64.luau"}},{"name":"Dot","desc":"Returns the dot product of the two vectors\\n\\n\\n    ","params":[{"name":"vector","desc":"","lua_type":"Vec64"}],"returns":[{"desc":"","lua_type":"Vec64"}],"function_type":"method","source":{"line":282,"path":"src/Vec64.luau"}},{"name":"FuzzyEq","desc":"Returns true if the other [Vec64] falls within the epsilon radius of this [Vec64]\\n\\n\\n    ","params":[{"name":"vector","desc":"","lua_type":"Vec64"},{"name":"epsilon","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":295,"path":"src/Vec64.luau"}},{"name":"Lerp","desc":"Returns a linearly interpolated [Vec64] between itself and the `vector` goal Vec64 by the fraction `alpha`\\n\\n\\n    ","params":[{"name":"vector","desc":"","lua_type":"Vec64"},{"name":"alpha","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Vec64"}],"function_type":"method","source":{"line":314,"path":"src/Vec64.luau"}},{"name":"Max","desc":"Returns a [Vec64] where each component is the highest among the respective components of itelf and the provided [Vec64]s\\n\\n\\n\\n```lua title=\\"/src/v64MaxTest.luau\\"\\nlocal vector1 = Vec64.new(3, 54, 9)\\nlocal vector2 = Vec64.new(5, 1, 11)\\n\\nlocal max = vector1:Max(vector2)\\nassert(max == Vec64.new(5, 54, 11), \\"max should equal given Vec64\\")\\n```\\n    ","params":[{"name":"...","desc":"","lua_type":"Vec64"}],"returns":[{"desc":"","lua_type":"Vec64"}],"function_type":"method","source":{"line":334,"path":"src/Vec64.luau"}},{"name":"AbsoluteMax","desc":"Returns a [Vec64] where each component is equal to the largest component of all given [Vec64]s\\n\\n\\n\\n```lua title=\\"/src/v64AbsoluteMaxTest.luau\\"\\nlocal vector1 = Vec64.new(3, 54, 9)\\nlocal vector2 = Vec64.new(5, 1, 11)\\n\\nlocal max = vector1:Max(vector2)\\nassert(max == Vec64.new(54, 54, 54), \\"max should equal given Vec64\\")\\n```\\n    ","params":[{"name":"...","desc":"","lua_type":"Vec64"}],"returns":[{"desc":"","lua_type":"Vec64"}],"function_type":"method","source":{"line":362,"path":"src/Vec64.luau"}},{"name":"Min","desc":"Returns a [Vec64] where each component is the lowest among the respective components of itelf and the provided [Vec64]s\\n\\n\\n\\n```lua title=\\"/src/v64MinTest.luau\\"\\nlocal vector1 = Vec64.new(3, 54, 9)\\nlocal vector2 = Vec64.new(5, 1, 11)\\n\\nlocal min = vector1:Min(vector2)\\nassert(max == Vec64.new(3, 1, 9), \\"min should equal given Vec64\\")\\n```\\n    ","params":[{"name":"...","desc":"","lua_type":"Vec64"}],"returns":[{"desc":"","lua_type":"Vec64"}],"function_type":"method","source":{"line":389,"path":"src/Vec64.luau"}},{"name":"AbsoluteMin","desc":"Returns a [Vec64] where each component is equal to the smallest component of all given [Vec64]s\\n\\n\\n\\n```lua title=\\"/src/v64AbsoluteMinTest.luau\\"\\nlocal vector1 = Vec64.new(3, 54, 9)\\nlocal vector2 = Vec64.new(5, 1, 11)\\n\\nlocal min = vector1:Max(vector2)\\nassert(min == Vec64.new(1, 1, 1), \\"min should equal given Vec64\\")\\n```\\n    ","params":[{"name":"...","desc":"","lua_type":"Vec64"}],"returns":[{"desc":"","lua_type":"Vec64"}],"function_type":"method","source":{"line":417,"path":"src/Vec64.luau"}},{"name":"Components","desc":"Returns the [Vec64]s components as a Tuple\\n\\n    ","params":[],"returns":[{"desc":"","lua_type":"(x: number, y: number, z: number)"}],"function_type":"method","source":{"line":434,"path":"src/Vec64.luau"}},{"name":"Clone","desc":"Returns a clone instance of the [Vec64]\\n\\n    ","params":[],"returns":[{"desc":"","lua_type":"Vec64"}],"function_type":"method","source":{"line":444,"path":"src/Vec64.luau"}},{"name":"ToVector3","desc":"Returns a [Vector3] if the environment is Roblox, otherwise it returns a [Vec64]\\n\\n    ","params":[],"returns":[{"desc":"","lua_type":"Vec64 | Vector3"}],"function_type":"method","source":{"line":454,"path":"src/Vec64.luau"}}],"properties":[{"name":"X","desc":"X component of the vector\\r","lua_type":"number","source":{"line":75,"path":"src/Vec64.luau"}},{"name":"Y","desc":"Y component of the vector\\r","lua_type":"number","source":{"line":79,"path":"src/Vec64.luau"}},{"name":"Z","desc":"Z component of the vector\\r","lua_type":"number","source":{"line":83,"path":"src/Vec64.luau"}}],"types":[],"name":"Vec64","desc":"The main class holding everything together, uses 64 bit numbers","source":{"line":71,"path":"src/Vec64.luau"}}')}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[976],{7879:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>t,default:()=>u,frontMatter:()=>c,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"intro","title":"Basic Tutorial","description":"Using this is almost the exact same as using a Vector3","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/Vec64/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/Danker69/Vec64/edit/master/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"defaultSidebar"}');var s=a(4848),r=a(8453);const c={sidebar_position:1},t="Basic Tutorial",i={},o=[{value:"Operator Overloads",id:"operator-overloads",level:2},{value:"Equality (=)",id:"equality-",level:3},{value:"Negation (-Vec64)",id:"negation--vec64",level:3},{value:"Addition (+)",id:"addition-",level:3},{value:"Subtraction (-)",id:"subtraction--",level:3},{value:"Multiplication (*)",id:"multiplication-",level:3},{value:"Division (/)",id:"division-",level:3},{value:"Exponentiation (^)",id:"exponentiation-",level:3},{value:"Modulo (%)",id:"modulo-",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"basic-tutorial",children:"Basic Tutorial"})}),"\n",(0,s.jsx)(n.p,{children:"Using this is almost the exact same as using a Vector3"}),"\n",(0,s.jsx)(n.h1,{id:"example-use-case",children:"Example use case:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="/src/MyLovelyVector.luau"',children:'local vector = Vec64.new(4, 6, 7)\r\nlocal vectorToAdd = Vec64.new(6, 4, 3)\r\n\r\nlocal vectorSum = vector + vectorToAdd\r\nassert(vectorSum == Vec64.new(10, 10, 10), "If this fails then something went horribly wrong.")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"operator-overloads",children:"Operator Overloads"}),"\n",(0,s.jsx)(n.p,{children:"There's several way you can use operators on your Vec64"}),"\n",(0,s.jsx)(n.h3,{id:"equality-",children:"Equality (=)"}),"\n",(0,s.jsx)(n.p,{children:"A Vec64 is equal to another Vec64 when their respective components are the same"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="/src/equalityCheckTest.luau"',children:'local v1 = Vec64.new(1, 1, 1)\r\nlocal v2 = Vec64.one\r\n\r\nassert(v1 == v2, "These should be equal")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"negation--vec64",children:"Negation (-Vec64)"}),"\n",(0,s.jsx)(n.p,{children:"A Vec64 can be negated, which flips each sign on its respective components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="/src/negationCheckTest.luau"',children:'local v1 = Vec64.new(1, 1, 1)\r\nlocal v2 = Vec64.new(-1, -1, -1)\r\n\r\nassert(-v1 == v2, "These should be equal")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"addition-",children:"Addition (+)"}),"\n",(0,s.jsx)(n.p,{children:"A Vec64 can be added onto another Vec64"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="/src/additionCheckTest.luau"',children:'local v1 = Vec64.new(1, 2, 3)\r\nlocal v2 = Vec64.new(5, 4, 4)\r\n\r\nlocal sum = Vec64.new(6, 6, 7)\r\n\r\nassert(v1 + v2 == sum, "These should be equal")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"subtraction--",children:"Subtraction (-)"}),"\n",(0,s.jsx)(n.p,{children:"A Vec64 can be subtracted from another Vec64"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="/src/subtractionCheckTest.luau"',children:'local v1 = Vec64.new(10, 5, -5)\r\nlocal v2 = Vec64.new(4, -2, 3)\r\n\r\nlocal res = Vec64.new(6, 7, -8)\r\n\r\nassert(v1 - v2 == res, "These should be equal")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"multiplication-",children:"Multiplication (*)"}),"\n",(0,s.jsx)(n.p,{children:"A Vec64 can either be multiplied by another Vec64, or a scalar number"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="/src/multiplicationCheckTest.luau"',children:'local v1 = Vec64.new(1, 0, 11)\r\nlocal v2 = Vec64.new(2, 9, 4)\r\n\r\nlocal product_v1v2 = Vec64.new(2, 0, 44)\r\n\r\nassert(v1 * v2 == product_v1v2, "These should be equal")\n'})}),"\n",(0,s.jsx)(n.p,{children:"For scalar values, they can be positioned on either side of the operator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="/src/multiplicationCheckTest.luau"',children:'local v1 = Vec64.new(1, 0, 11)\r\nlocal scalar = 2\r\n\r\nassert(v1 * scalar == Vec64.new(2, 0, 22), "These should be equal")\r\nassert(scalar * v1 == Vec64.new(2, 0, 22), "These should be equal")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"division-",children:"Division (/)"}),"\n",(0,s.jsx)(n.p,{children:"A Vec64 can be divided by another Vec64 or a scalar value"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="/src/divisionCheckTest.luau"',children:'local v1 = Vec64.new(10, 2, 4)\r\nlocal v2 = Vec64.new(5, 1, 6)\r\n\r\nassert(v1 / v2 == Vec64.new(2, 2, 4/6), "These should be equal")\r\nassert(v1 / 2 == Vec64.new(5, 1, 2), "These should be equal")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"exponentiation-",children:"Exponentiation (^)"}),"\n",(0,s.jsx)(n.p,{children:"A Vec64 can be raised to the power of a number or another Vec64"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="/src/exponentiationCheckTest.luau"',children:'local v1 = Vec64.new(4, 2, 10)\r\nlocal v2 = Vec64.new(2, 3, 1)\r\n\r\nassert(v1 ^ v2 == Vec64.new(16, 8, 10), "These should be equal")\r\nassert(v1 ^ 2 == Vec64.new(16, 4, 100), "These should be equal")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"modulo-",children:"Modulo (%)"}),"\n",(0,s.jsx)(n.p,{children:"You can get the remainder of a modulus operation on a Vec64 by using another Vec64 or a scalar value"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",metastring:'title="/src/moduloCheckTest.luau"',children:'local v1 = Vec64.new(5, 10, 2)\r\nlocal v2 = Vec64.new(3, 5, 4)\r\n\r\nassert(v1 % v2 == Vec64.new(2, 0, 2), "These should be equal")\r\nassert(v1 % 2 == Vec64.new(1, 0, 0), "These should be equal")\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>t});var l=a(6540);const s={},r=l.createContext(s);function c(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);
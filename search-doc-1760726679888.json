{"searchDocs":[{"title":"Vec64Module","type":0,"sectionRef":"#","url":"/Vec64/api/Vec64Module","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Vec64Module","url":"/Vec64/api/Vec64Module#properties","content":" ","version":null,"tagName":"h2"},{"title":"zero​","type":1,"pageTitle":"Vec64Module","url":"/Vec64/api/Vec64Module#zero","content":"&lt;/&gt; Vec64Module.zero: Vec64 Returns a new Vec64 component (0, 0, 0)  ","version":null,"tagName":"h3"},{"title":"one​","type":1,"pageTitle":"Vec64Module","url":"/Vec64/api/Vec64Module#one","content":"&lt;/&gt; Vec64Module.one: Vec64 Returns a new Vec64 component (1, 1, 1)  ","version":null,"tagName":"h3"},{"title":"xAxis​","type":1,"pageTitle":"Vec64Module","url":"/Vec64/api/Vec64Module#xAxis","content":"&lt;/&gt; Vec64Module.xAxis: Vec64 Returns a new Vec64 component (1, 0, 0)  ","version":null,"tagName":"h3"},{"title":"yAxis​","type":1,"pageTitle":"Vec64Module","url":"/Vec64/api/Vec64Module#yAxis","content":"&lt;/&gt; Vec64Module.yAxis: Vec64 Returns a new Vec64 component (0, 1, 0)  ","version":null,"tagName":"h3"},{"title":"zAxis​","type":1,"pageTitle":"Vec64Module","url":"/Vec64/api/Vec64Module#zAxis","content":"&lt;/&gt; Vec64Module.zAxis: Vec64 Returns a new Vec64 component (0, 0, 1) ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Vec64Module","url":"/Vec64/api/Vec64Module#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Vec64Module","url":"/Vec64/api/Vec64Module#new","content":"&lt;/&gt; Vec64Module.new( x: number?, y: number?, z: number? ) → Vec64 Creates a new instance of Vec64 ","version":null,"tagName":"h3"},{"title":"Vec64","type":0,"sectionRef":"#","url":"/Vec64/api/Vec64","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#properties","content":" ","version":null,"tagName":"h2"},{"title":"X​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#X","content":"&lt;/&gt; Vec64.X: number X component of the vector  ","version":null,"tagName":"h3"},{"title":"Y​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#Y","content":"&lt;/&gt; Vec64.Y: number Y component of the vector  ","version":null,"tagName":"h3"},{"title":"Z​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#Z","content":"&lt;/&gt; Vec64.Z: number Z component of the vector ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#functions","content":" ","version":null,"tagName":"h2"},{"title":"Magnitude​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#Magnitude","content":"&lt;/&gt; Vec64:Magnitude() → number Returns the magnitude (distance) of the vector from (0, 0, 0)  ","version":null,"tagName":"h3"},{"title":"Unit​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#Unit","content":"&lt;/&gt; Vec64:Unit() → Vec64 Returns the unit (direction) of the vector  ","version":null,"tagName":"h3"},{"title":"Cross​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#Cross","content":"&lt;/&gt; Vec64:Cross(vector: Vec64) → Vec64 Returns the cross product of the two vectors  ","version":null,"tagName":"h3"},{"title":"Dot​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#Dot","content":"&lt;/&gt; Vec64:Dot(vector: Vec64) → Vec64 Returns the dot product of the two vectors  ","version":null,"tagName":"h3"},{"title":"FuzzyEq​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#FuzzyEq","content":"&lt;/&gt; Vec64:FuzzyEq( vector: Vec64, epsilon: number ) → boolean Returns true if the other Vec64 falls within the epsilon radius of this Vec64  ","version":null,"tagName":"h3"},{"title":"Lerp​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#Lerp","content":"&lt;/&gt; Vec64:Lerp( vector: Vec64, alpha: number ) → Vec64 Returns a linearly interpolated Vec64 between itself and the vector goal Vec64 by the fraction alpha  ","version":null,"tagName":"h3"},{"title":"Max​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#Max","content":"&lt;/&gt; Vec64:Max(...: Vec64) → Vec64 Returns a Vec64 where each component is the highest among the respective components of itelf and the provided Vec64s local vector1 = Vec64.new(3, 54, 9) local vector2 = Vec64.new(5, 1, 11) local max = vector1:Max(vector2) assert(max == Vec64.new(5, 54, 11), &quot;max should equal given Vec64&quot;)   ","version":null,"tagName":"h3"},{"title":"AbsoluteMax​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#AbsoluteMax","content":"&lt;/&gt; Vec64:AbsoluteMax(...: Vec64) → Vec64 Returns a Vec64 where each component is equal to the largest component of all given Vec64s local vector1 = Vec64.new(3, 54, 9) local vector2 = Vec64.new(5, 1, 11) local max = vector1:Max(vector2) assert(max == Vec64.new(54, 54, 54), &quot;max should equal given Vec64&quot;)   ","version":null,"tagName":"h3"},{"title":"Min​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#Min","content":"&lt;/&gt; Vec64:Min(...: Vec64) → Vec64 Returns a Vec64 where each component is the lowest among the respective components of itelf and the provided Vec64s local vector1 = Vec64.new(3, 54, 9) local vector2 = Vec64.new(5, 1, 11) local min = vector1:Min(vector2) assert(max == Vec64.new(3, 1, 9), &quot;min should equal given Vec64&quot;)   ","version":null,"tagName":"h3"},{"title":"AbsoluteMin​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#AbsoluteMin","content":"&lt;/&gt; Vec64:AbsoluteMin(...: Vec64) → Vec64 Returns a Vec64 where each component is equal to the smallest component of all given Vec64s local vector1 = Vec64.new(3, 54, 9) local vector2 = Vec64.new(5, 1, 11) local min = vector1:Max(vector2) assert(min == Vec64.new(1, 1, 1), &quot;min should equal given Vec64&quot;)   ","version":null,"tagName":"h3"},{"title":"Components​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#Components","content":"&lt;/&gt; Vec64:Components() → ( x: number, y: number, z: number ) Returns the Vec64s components as a Tuple  ","version":null,"tagName":"h3"},{"title":"Clone​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#Clone","content":"&lt;/&gt; Vec64:Clone() → Vec64 Returns a clone instance of the Vec64  ","version":null,"tagName":"h3"},{"title":"ToVector3​","type":1,"pageTitle":"Vec64","url":"/Vec64/api/Vec64#ToVector3","content":"&lt;/&gt; Vec64:ToVector3() → Vec64 | Vector3  Returns a Vector3 if the environment is Roblox, otherwise it returns a Vec64 ","version":null,"tagName":"h3"},{"title":"Basic Tutorial","type":0,"sectionRef":"#","url":"/Vec64/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Operator Overloads​","type":1,"pageTitle":"Basic Tutorial","url":"/Vec64/docs/intro#operator-overloads","content":" There's several way you can use operators on your Vec64  ","version":"Next","tagName":"h2"},{"title":"Equality (=)​","type":1,"pageTitle":"Basic Tutorial","url":"/Vec64/docs/intro#equality-","content":" A Vec64 is equal to another Vec64 when their respective components are the same  /src/equalityCheckTest.luau local v1 = Vec64.new(1, 1, 1) local v2 = Vec64.one assert(v1 == v2, &quot;These should be equal&quot;)   ","version":"Next","tagName":"h3"},{"title":"Negation (-Vec64)​","type":1,"pageTitle":"Basic Tutorial","url":"/Vec64/docs/intro#negation--vec64","content":" A Vec64 can be negated, which flips each sign on its respective components  /src/negationCheckTest.luau local v1 = Vec64.new(1, 1, 1) local v2 = Vec64.new(-1, -1, -1) assert(-v1 == v2, &quot;These should be equal&quot;)   ","version":"Next","tagName":"h3"},{"title":"Addition (+)​","type":1,"pageTitle":"Basic Tutorial","url":"/Vec64/docs/intro#addition-","content":" A Vec64 can be added onto another Vec64  /src/additionCheckTest.luau local v1 = Vec64.new(1, 2, 3) local v2 = Vec64.new(5, 4, 4) local sum = Vec64.new(6, 6, 7) assert(v1 + v2 == sum, &quot;These should be equal&quot;)   ","version":"Next","tagName":"h3"},{"title":"Subtraction (-)​","type":1,"pageTitle":"Basic Tutorial","url":"/Vec64/docs/intro#subtraction--","content":" A Vec64 can be subtracted from another Vec64  /src/subtractionCheckTest.luau local v1 = Vec64.new(10, 5, -5) local v2 = Vec64.new(4, -2, 3) local res = Vec64.new(6, 7, -8) assert(v1 - v2 == res, &quot;These should be equal&quot;)   ","version":"Next","tagName":"h3"},{"title":"Multiplication (*)​","type":1,"pageTitle":"Basic Tutorial","url":"/Vec64/docs/intro#multiplication-","content":" A Vec64 can either be multiplied by another Vec64, or a scalar number  /src/multiplicationCheckTest.luau local v1 = Vec64.new(1, 0, 11) local v2 = Vec64.new(2, 9, 4) local product_v1v2 = Vec64.new(2, 0, 44) assert(v1 * v2 == product_v1v2, &quot;These should be equal&quot;)   For scalar values, they can be positioned on either side of the operator  /src/multiplicationCheckTest.luau local v1 = Vec64.new(1, 0, 11) local scalar = 2 assert(v1 * scalar == Vec64.new(2, 0, 22), &quot;These should be equal&quot;) assert(scalar * v1 == Vec64.new(2, 0, 22), &quot;These should be equal&quot;)   ","version":"Next","tagName":"h3"},{"title":"Division (/)​","type":1,"pageTitle":"Basic Tutorial","url":"/Vec64/docs/intro#division-","content":" A Vec64 can be divided by another Vec64 or a scalar value  /src/divisionCheckTest.luau local v1 = Vec64.new(10, 2, 4) local v2 = Vec64.new(5, 1, 6) assert(v1 / v2 == Vec64.new(2, 2, 4/6), &quot;These should be equal&quot;) assert(v1 / 2 == Vec64.new(5, 1, 2), &quot;These should be equal&quot;)   ","version":"Next","tagName":"h3"},{"title":"Exponentiation (^)​","type":1,"pageTitle":"Basic Tutorial","url":"/Vec64/docs/intro#exponentiation-","content":" A Vec64 can be raised to the power of a number or another Vec64  /src/exponentiationCheckTest.luau local v1 = Vec64.new(4, 2, 10) local v2 = Vec64.new(2, 3, 1) assert(v1 ^ v2 == Vec64.new(16, 8, 10), &quot;These should be equal&quot;) assert(v1 ^ 2 == Vec64.new(16, 4, 100), &quot;These should be equal&quot;)   ","version":"Next","tagName":"h3"},{"title":"Modulo (%)​","type":1,"pageTitle":"Basic Tutorial","url":"/Vec64/docs/intro#modulo-","content":" You can get the remainder of a modulus operation on a Vec64 by using another Vec64 or a scalar value  /src/moduloCheckTest.luau local v1 = Vec64.new(5, 10, 2) local v2 = Vec64.new(3, 5, 4) assert(v1 % v2 == Vec64.new(2, 0, 2), &quot;These should be equal&quot;) assert(v1 % 2 == Vec64.new(1, 0, 0), &quot;These should be equal&quot;)  ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}